===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of the two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

::

    >>> add_integer(6, -2)
    4

The function also works with floating-point values.

::

    >>> add_integer(6.0, 3.0)
    9

Note that floats are casted to integers before addition.

::

    >>> add_integer(5.3, 1.5)
    6

::

    >>> add_integer(-4.2, -0.2)
    -4

Floating and non-floating point values can be combined.

::

    >>> add_integer(5, -4)
    1

The second argument is optional - by default, it is 98.

::

    >>> add_integer(1)
    99

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hey", 5)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(4, "hey")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(8.1, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("good", "morning")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(8, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(4, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
